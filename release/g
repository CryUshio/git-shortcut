#! /bin/bash


# utils
util_exsist() {
  command -v $1 >/dev/null 2>&1
}

util_getBranchName() {
  result=$(git symbolic-ref --short -q HEAD 2>&1)

  if [[ "$result" == 'fatal'* ]]; then
    echo 
  else
    echo $result
  fi
}

util_replace() {
  originStr=$1
  matchVal=$2
  replaceVal=$3

  echo $originStr | sed "s/$matchVal/$replaceVal/g"
}


# commands
cmd_push() {
  branchName=$(util_getBranchName)
  # 判断空字符串
  if [ -z "$branchName" ]; then
    echo 'branchName is empty.'
  else
    echo -e "-> branch: origin $branchName\n"
    git push origin $branchName
  fi
}

cmd_pull() {
  branchName=$(util_getBranchName)
  # 判断空字符串
  if [ -z "$1" ]; then
    git pull origin $branchName
  else
    git pull origin $1
  fi
}

cmd_commit() {
  if [ -z "$1" ]; then
    git commit
  else
    # only cmd start with '-'
    if [[ "$1" == '-'* ]]; then
      echo "-> git commit $*"
      git commit $*
    else
      comment="$1"
      shift
      echo "-> git commit -m \"$comment\" $*"
      git commit -m "$comment" $*
    fi
  fi
}

cmd_submit() {
  if [ -z "$1" ]; then
    git add . && (cmd_commit "feat: update.") && cmd_push
  else
    _1="$1"
    shift
    git add . && (cmd_commit "$_1" $*) && cmd_push
  fi
}

cmd_merge() {
  targetBranch="$1"
  recBranch=$(util_getBranchName)

  doMerge() {
    if [ -z "$targetBranch" ]; then
      git checkout master && git pull && git checkout - && git merge master
    else
      git merge "$targetBranch"
    fi
  }

  if [ "$recBranch" == "master" ]; then
    cmd="$2"
    if [ "$cmd" == "-f" ]; then
      echo "$(doMerge)"
    else
      echo 'Your branch now is in `master`, add `-f` at the end to enforce.'
    fi
  else
    echo "$(doMerge)"
  fi
}

cmd_newBranch() {
  recBranch=$(util_getBranchName)
  branchName="$1"
  cmd="$2"

  if [ "$recBranch" != "master" ]; then
    if [ "$cmd" == "-f" ]; then
      git checkout -b "$branchName"
    else
      echo 'Your branch now is not in `master`, add `-f` at the end to enforce.'
    fi
  else
    git checkout -b "$branchName"
  fi
}

cmd_remove() {
  branchName="$1"
  cmd="$2"
  if [ "$cmd" == "-D" ]; then
    git branch -D $branchName
  else
    git branch -d $branchName
  fi
}


# main
help() {
  cat <<EOF
Usage: g <command> <...?>

<Commands>
  ad:  git add .
  br:  git branch <...>
  cl:  git clone <...>
  ck:  git checkout <branchName>
  rm:  git branch <-d|-D> <branchName>
  ma:  git checkout master
  + :  git checkout -b <branchName>, press \`tab\` to add today's date (eg. \`20191122\`)
  - :  git checkout -, 回到上一个分支
  ps:  git push origin [current branch], 推送代码到当前远程分支
  pl:  git pull origin <branchName>?, 从远程分支拉取代码
  fc:  git fetch, 获取远程仓库变动
  cm:  <comment?|cmd?>, git commit <-m comment?|cmd?>
  sm:  <comment?>, git add . && git commit -m <comment?|'feat: update.'> && git push, 一键推送所有修改
  mg:  git merge <branchName?>, 拉取并 merge 目标分支, 默认 merge master

  g <h|help>: For help
  g <cmd>: git <cmd>
EOF
}

case_key=$1
shift
case $case_key in
ad)
  git add .
  ;;
br)
  git branch $*
  ;;
cl)
  git clone $1
  ;;
ck)
  git checkout $1
  ;;
rm)
  cmd_remove $*
  ;;
ma)
  git checkout master
  ;;
+)
  cmd_newBranch $*
  ;;
-)
  git checkout -
  ;;
ps)
  cmd_push
  ;;
pl)
  cmd_pull "$1"
  ;;
fc)
  git fetch
  ;;
cm)
  cm_1="$1"
  shift
  cmd_commit "$cm_1" $*
  ;;
sm)
  sm_1="$1"
  shift
  cmd_submit "$sm_1" $*
  ;;
mg)
  cmd_merge $1 $2
  ;;

h | help | "")
  help
  ;;
*)
  git $case_key $*
  ;;
esac
